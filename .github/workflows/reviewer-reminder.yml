name: Weekly Reviewer Reminder

on:
  schedule:
    # Default: Every Monday 15:00 UTC â€” adjust as needed
    - cron: "0 15 * * 1"
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PENDING_LABELS: 'annual-report,quarterly-report'
  REMINDER_COOLDOWN_DAYS: '7'
  COMMENT_MARKER: '<!-- reviewer-reminder -->'

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - name: Remind pending reviewers on labeled open PRs
        uses: actions/github-script@v7
        with:
          script: |
            const labelsEnv = process.env.PENDING_LABELS || '';
            const pendingLabels = labelsEnv.split(',').map(s => s.trim()).filter(Boolean);
            if (!pendingLabels.length) {
              core.setFailed('No PENDING_LABELS configured.');
              return;
            }
            const cooldownDays = parseInt(process.env.REMINDER_COOLDOWN_DAYS || '7', 10);
            const marker = process.env.COMMENT_MARKER || '<!-- reviewer-reminder -->';

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const now = new Date();
            const cutoff = new Date(now.getTime() - cooldownDays * 24 * 60 * 60 * 1000);

            // Collect PRs for each label (OR across labels), dedupe by number
            const prMap = new Map();
            for (const lbl of pendingLabels) {
              const q = `repo:${owner}/${repo} is:pr is:open label:"${lbl}"`;
              for await (const res of github.paginate.iterator(
                github.rest.search.issuesAndPullRequests,
                { q, per_page: 100 }
              )) {
                for (const item of res.data) {
                  prMap.set(item.number, item);
                }
              }
            }

            core.info(`Found ${prMap.size} open PR(s) with labels: ${pendingLabels.join(', ')}`);

            for (const [number, _item] of prMap.entries()) {
              // Get current PR state
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              if (pr.state !== 'open' || pr.merged_at) {
                core.info(`#${number} skipped (not open or already merged).`);
                continue;
              }

              // Identify pending individual reviewers (active review requests)
              const pendingUsers = (pr.requested_reviewers || []).map(u => u.login);

              if (!pendingUsers.length) {
                core.info(`#${number} has no pending individual review requests; skipping.`);
                continue;
              }

              // Anti-spam: skip if our marker comment exists within cooldown window
              const comments = await github.paginate(github.rest.issues.listComments, {
                owner, repo, issue_number: number, per_page: 100
              });

              const recentReminder = comments.some(c => {
                if (!c.body || !c.body.includes(marker)) return false;
                const created = new Date(c.created_at);
                return created >= cutoff;
              });

              if (recentReminder) {
                core.info(`#${number} had a reminder within last ${cooldownDays} day(s); skipping.`);
                continue;
              }

              // Compose and post reminder
              const prUrl = pr.html_url;
              const prTitle = pr.title;
              const mentions = pendingUsers.map(u => `@${u}`).join(' ');
                const body = `${marker}\nHi ${mentions},\n\nThis is a friendly weekly reminder that you have a pending review request on:\n- ${prTitle} (${prUrl})\n\nPlease take a look when you get a moment. Thank you!`;
              await github.rest.issues.createComment({
                owner, repo, issue_number: number, body
              });

              core.info(`#${number} reminder posted to: ${mentions}`);
            }
